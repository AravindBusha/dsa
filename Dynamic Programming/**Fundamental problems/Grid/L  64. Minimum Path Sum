// 64. Minimum Path Sum
// https://leetcode.com/problems/minimum-path-sum/

/*
->Using Dynamic Programming
first we do 0th row and 0th col 
and 
dp[i][j] is Minimum of (dp[i-1][j] or dp[i][j])+grid[i]) 

->Return the last index value

*/

class Solution {
    public int minPathSum(int[][] grid) {
        int row = grid.length, col = grid[0].length;
        int[][] dp = new int[row][col];
        int sum = 0;
        dp[0][0] = grid[0][0];
        
        for(int i = 1; i<row; i++)// for 0th row 
        {
            dp[i][0] = dp[i-1][0]+grid[i][0];
        }
        for(int i = 1; i<col; i++) // for 0th col
        {
            dp[0][i] = dp[0][i-1]+grid[0][i];
        }
        
        for(int i = 1; i<row; i++)
        {
            for(int j = 1; j<col; j++)
            {
                dp[i][j] = Math.min(dp[i][j-1], dp[i-1][j])+grid[i][j];
            }
        }
        
        // System.out.println(Arrays.deepToString(dp));
        
        return dp[row-1][col-1];
    }
}


// using recurssion and memoization
// class Solution {

// public int minPathSum(int[][] grid) {
//     int m = grid.length;
//     int n = grid[0].length;
//     int[][] dp = new int[m][n];
//     Arrays.stream(dp).forEach(a -> Arrays.fill(a,-1));
//     return minpathSum(grid,0,0,m,n,dp);
// }
// public int minpathSum(int[][] grid,int i,int j,int m,int n,int[][] dp){
//     if(i == m || j == n)return Integer.MAX_VALUE; //for out of bound elements we return max_val to get the real path while calculating max.
//     if(i == m-1 && j == n-1)return grid[i][j]; //we reach the destination
//     if(dp[i][j] != -1)return dp[i][j];
// 	 // check min between down path anf right path
//     return dp[i][j] = grid[i][j]+Math.min(minpathSum(grid,i+1,j,m,n,dp),minpathSum(grid,i,j+1,m,n,dp));
// }
// }

//another method

// class Solution {
//     public int minPathSum(int[][] grid) {
        
//         int row=grid.length;
//         int col=grid[0].length;
//         int dp[][] = new int [row][col];
//         dp[0][0]=grid[0][0];
        
//         for(int i=0;i<row;i++){
//             for(int j=0;j<col;j++){
                
//                 if(i ==0 && j==0) continue;
                
//                 int left=Integer.MAX_VALUE,down=Integer.MAX_VALUE;
//                 if(j-1>=0) left=dp[i][j-1];
//                 if(i-1>=0) down=dp[i-1][j];
//                 dp[i][j]=Math.min(left,down)+grid[i][j];
           
//             }
//         }
//         System.out.println(Arrays.deepToString(dp));
//         return dp[row-1][col-1];
        
//     }
// }
