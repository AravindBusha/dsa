//63. Unique Paths II  ( same as unique paths 1)


class Solution {
    public int uniquePathsWithObstacles(int[][] grid) {
        int row=grid.length;
        int col=grid[0].length;
        int dp[][]=new int[row][col];
        dp[0][0]=1;
        
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if((i==0 && j==0) ||(grid[i][j]==-1)) continue;
                
                if(j>0) dp[i][j]+=dp[i][j-1];
                if(i>0) dp[i][j]+=dp[i-1][j];
                
            }
        }
            return dp[row-1][col-1];
    }
}



// class Solution {
//     int[][] dp;
//     public int uniquePathsWithObstacles(int[][] grid) {
//         int row=grid.length;
//         int col=grid[0].length;
//         dp=new int[row][col];
//          return fun(grid,0,0,row,col);
//         }
//     public int fun(int[][] grid,int i,int j,int row,int col)
//     {
//         if(i==row-1 && j==col-1)
//             return 1;
        
//         if(i>row-1 || j>col-1)
//             return 0;
        
//         if(grid[i][j]==-1)
//             return 0;
        
//         if(dp[i][j]!=0)
//             return dp[i][j];
        
//         int left=fun(grid,i,j+1,row,col);
//         int right=fun(grid,i+1,j,row,col);
//         System.out.println(i+" "+j);
//         return dp[i][j]=left+right;
        
        
//     }
// }
