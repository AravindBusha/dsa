// 62. Unique Paths
/*
first we set the dp[0][0]=1
and we travel to the grid by adding the both left and up previous value
finally return the dp[m-1][n-1];

*/

class Solution {
    public int uniquePaths(int m, int n) {
        int dp[][]=new int[m][n];
        dp[0][0]=1;

        for(int i = 0; i<m; i++) {
            for(int j = 0; j<n; j++) {
                if(i==0 && j==0) continue;
                
                if(j>0) dp[i][j] += dp[i][j-1];
                if(i>0) dp[i][j] += dp[i-1][j];
            }
        }
        
        return dp[m-1][n-1];
    }
}



// class Solution {
//      // int count=0;
//     int dp[][];
//     public int uniquePaths(int m, int n) {
//        dp=new int[m+1][n+1];
//         // for(int i=0;i<)
//         return fun(m,n,0,0);
//         // return return count;
        
//     }
//     public int fun(int m, int n,int i,int j)
//     {
      
//         if(i==m-1 && j==n-1)
//             return 1;
//         if(i>m-1|| j>n-1)
//             return 0;
//           if(dp[i][j]!=0)
//             return dp[i][j];
        
//         int left=fun(m,n,i+1,j);
//         int right=fun(m,n,i,j+1);
//         // System.out.println(left+" "+right+"  "+i +"  "+j);
//         return dp[i][j]=left+right;
//     }
// }
