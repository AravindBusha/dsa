

/*
416. Partition Equal Subset Sum


https://www.youtube.com/watch?v=7win3dcgo3k&list=PLgUwDviBIf0qUlt5H_kiKYaNSqJ81PMMY&index=16
*/
class Solution {
    int dp[][];
    public boolean canPartition(int[] nums) {
        int sum=0;
        for(int a:nums)
            sum+=a;
        if(sum%2!=0)
            return false;
        dp=new int[nums.length][sum/2+1];
        for(int[] row :dp)
            Arrays.fill(row,-1);
        return fun(nums, nums.length-1,sum/2);
    }
    
    public boolean fun(int[] nums,int index,int target){
        if(target==0) return true;
        if(index==0) return nums[index]==target;
        if(dp[index][target]!=-1)  return (dp[index][target]==0 ? false : true);
            
        boolean notInclude=fun(nums,index-1,target);
        boolean include =false;
        if(nums[index]<=target) 
            include=fun(nums,index-1,target-nums[index]);
        
        dp[index][target]=include || notInclude ? 1 : 0;
        return include || notInclude;
    }
}
