/*
56. Merge Intervals
https://www.youtube.com/watch?v=2JzRBPFYbKE

taking two arraylist one for storing starting value and one for ending value,

Logic:(took ref and code on own)
    1. sort the array in asc of 0 index
    2. taking two arraylist one for storing starting value and one for ending value,
    3. now traverse the given intervals if and check the value is already stored in the range of arraylists
    4. if not in the already ranges , then insert new values in to the arraylist 
    5. if already in the range(start <=present value[0] <=end ) then replace the ranges inthe arraylist
    6. finally create a 2d array from both the arraylists

*/

class Solution {
    public int[][] merge(int[][] intervals) {
        
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));
        List<Integer> start = new ArrayList<>();
        List<Integer> end = new ArrayList<>();

        for(int i=0;i<intervals.length;i++) {
            boolean f =true;
            int j=0;
            
            for(;j<start.size();j++) {// checking whether is in the old ranges
                if(start.get(j) <= intervals[i][0] && end.get(j) >= intervals[i][0]) {
                    f=false;
                    break;
                }
            }

            if(f){ // if not the old ranges then create a new value in to the both arrays
                start.add(intervals[i][0]);
                end.add(intervals[i][1]);
            }
            else { // if in the old ranges then change the ranges
                start.set(j,Math.min(start.get(j),intervals[i][0]));
                end.set(j,Math.max(end.get(j),intervals[i][1]));
            }

        }
        // System.out.println(start+" "+end);
        int ans[][]=new int[start.size()][2];

        for(int i=0;i<start.size();i++){
            ans[i][0]=start.get(i);
            ans[i][1]=end.get(i);
        }

        return ans;
    }
}
