/*
75. Sort Colors

https://www.youtube.com/watch?v=oaVa-9wmpns

Logic :
    1. take left,mid,right where left to mid = 0, mid to right=1 and right to size-1 =2
    2. so make left and mid points to position 0, make right to size-1
    3. now always use the mid pointer 
    4. if mid =0 then, swap the mid and left variable and increment the left  and mid.
    5. if mid =1, then increment the mid pointer
    6.if mid =2, then swap the mid and right pointer values and decrement right pointer

*/

class Solution {
    public void sortColors(int[] nums) {
        int left=0, mid=0, right=nums.length-1;
        int temp=0;
        while(mid <= right) {
            if(nums[mid]==0) {

                temp=nums[mid];
                nums[mid]=nums[left];
                nums[left]=temp;
                left++;
                mid++;
            }
            else if(nums[mid]==1) {
                mid++;
            }
            else {
                temp=nums[mid];
                nums[mid]=nums[right];
                nums[right]=temp;
                right--;
                
            }
        }
    }
}



// class Solution {
//     public void sortColors(int[] nums) {
//         int count0=0, count1=0, count2=0;
        
//         for(int i=0;i<nums.length;i++) {
//             if(nums[i]==0) count0++;
//             else if(nums[i]==1) count1++;
//             else count2++;
//         }

//         int i=0;
//         while(count0-- > 0) {
//             nums[i++]=0;
//         }

//         while(count1-- > 0) {
//             nums[i++]=1;
//         }

//         while(count2-- > 0) {
//             nums[i++]=2;
//         }
//     }
// }
