https://www.hackerrank.com/challenges/jesse-and-cookies/problem?isFullScreen=true




import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'cookies' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER k
     *  2. INTEGER_ARRAY A
     */

    public static int cookies(int k, List<Integer> A) {
        //code here
        int count=0;
        PriorityQueue<Integer> pq=new PriorityQueue<>();
        for(int i :A)
        {
            pq.add(i);
        }
        while(true)
        {
            int a=pq.peek()==null ? -1 : pq.poll();
            int b=pq.peek()==null ? -1 : pq.poll();
            if(a==-1||b==-1)
            return -1;
            if((a>=k && b>=k))
            {
                return count;
            }
            int res=a+(b*2);
            count++;
            // if(res<k)
            pq.add(res);
            // System.out.println(pq);
        }
        
        // return 0;
    }

 }
//  PriorityQueue<Integer> he = new PriorityQueue<Integer>(numCookies);
//         for(int i = 0; i < numCookies; i++){
//             int sweetness = sc.nextInt();
//             he.add(sweetness);
//         }
//         while(he.peek() < minSweetness && he.size() > 1){
//             int ne = he.poll() + 2*he.poll();
//             he.add(ne);
//             count++;
//         }
//         if(he.peek() >= minSweetness){
//             System.out.println(count);
//         } else{
//             System.out.println(-1);
//         }
//     }
// }

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int n = Integer.parseInt(firstMultipleInput[0]);

        int k = Integer.parseInt(firstMultipleInput[1]);

        List<Integer> A = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        int result = Result.cookies(k, A);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
