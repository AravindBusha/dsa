/*
304. Range Sum Query 2D - Immutable


CONCEPT:

1 ST APPROACH :
 we can use the normal traversing from row1 to row2 and col1 to col2 and find the sum of the submatrix O(n2)
 
2 ND APPROACH:
    
 we do  the presum from and left to right and presum from top to bottom to the matrix
  and for the point presumMatrix(x,y) we should remove the top , left regions from the ans 
  and we should add the common area between them 
  (x,y)-(x-1,y)-(x,y-1)+(x-1,y-1) to get the ans 
 

*/
class NumMatrix {
    int temp[][] ;
    public NumMatrix(int[][] matrix) {
        temp = new int[matrix.length][matrix[0].length];
        for(int i=0;i<matrix.length;i++)
        {

            int sum=0;
            for(int j=0;j<matrix[0].length;j++)
            {
                sum+=matrix[i][j];
                temp[i][j]=sum;
            }
        }
        for(int j=0;j<matrix[0].length;j++)
        {

            int sum=0;
            for(int i=0;i<matrix.length;i++)
            {
                sum+=temp[i][j];
                temp[i][j]=sum;
            }
        }
        

    }
    
    public int sumRegion(int row1, int col1, int row2, int col2) {
        int sum=temp[row2][col2];
        
         if(col1 !=0 && row1 !=0)
            sum+=temp[row1-1][col1-1];
        if(col1!=0)
            sum-=temp[row2][col1-1];
        if(row1!=0)
            sum-=temp[row1-1][col2];
       
        
        
        return sum;
    }
}

