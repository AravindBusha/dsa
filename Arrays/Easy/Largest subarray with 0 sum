/*
Largest subarray with 0 sum
https://practice.geeksforgeeks.org/problems/largest-subarray-with-0-sum/1

Logic:
    1. Maintain the HashMap to store the key as presum and value as index
    2. while this if the sum is zero that means the entire subarray is the maximum length so store the max as position 'n' where max=n+1
    3. if not sum==0 then check if the key is already in the map then store the difference 
    4. else insert the presum and index
    5. Finally return the max

*/


class GfG
{
    int maxLen(int arr[], int n)
    {
        HashMap<Integer, Integer> map = new HashMap<>();
        
        int sum=0, max =0;
        
        for(int i=0;i<arr.length;i++) {
            
            sum+=arr[i];
            
            if(sum==0) max=i+1;
            else{
            
                if(map.containsKey(sum)) {
                    max=Math.max(max, i-map.get(sum));
                }
                else {
                map.put(sum,i);
                }
            }
        }
        
        return max;
    }
}
