/*
34. Find First and Last Position of Element in Sorted Array
 algo:
 see the comments ans which is simple and easy ,more efficiency
 if we found the target number then check whether it has the left side are the same target or not by using a pointer 
 same do search in right side by using the right pointer

class Solution {
    public int[] searchRange(int[] nums, int target) {
        int l=0;
        int r=nums.length-1;
        int value=-1;
        while(l<=r)
        {
            int mid=l+(r-l)/2;
            if(nums[mid]==target)
                return find(nums,l,r,mid,target);
            else if(nums[mid]<target) l=mid+1;
            else r=mid-1;
        }
        return new int[]{-1,-1};
    }
        public int[] find(int[] nums,int l,int r,int mid,int target){
            int min=mid,max=mid;
            while(l<=mid)
            {
                if(nums[l]==target )
                {
                    min=l;
                    break;
                }
                l++;
            }
            while(r>=mid)
            {
                if(nums[r]==target )
                {
                    max=r;
                    break;
                }
                r--;
            }
            return new int[]{min,max};
        }
                
}
*/class Solution {
    public int[] searchRange(int[] nums, int target) {
        int ans[]={-1,-1};
        ans[0]=fun(nums,target,true);
        ans[1]=fun(nums,target,false );
        
        return ans;
    }
    public int fun(int[] nums,int target,boolean isleft)
    {
         int left=0;
        int right=nums.length-1;
        int ans=-1;
        while(left <= right)
        {
            int mid=left+(right-left)/2;
            
            if(target < nums[mid] )
            {
                // ans=mid;
                right=mid-1;
            }
            else if(target > nums[mid])
            {
                left=mid+1;
            }
            else
            {
                ans=mid;
                if(isleft)
                    right=mid-1;
                else
                    left=mid+1;
            }
                
        }
        System.out.print(ans);
        return ans;
    }
    
}
