/*
1545. Find Kth Bit in Nth Binary String 
exp:( seen from comments )
if we construct a tree for the question we can observe many things like middle element is (k/2)+1
so if the wanted element is middle then the ans is 1;
if the k is less than middle length then just recurse
if the k is greate than middle length then make it to the range less than middle and flip the elements(if 0 then make 1 and reverse)


*/

// class Solution {
    // public StringBuilder fun2(StringBuilder s)
    //     {
    //         StringBuilder sb=new StringBuilder();
    //         for (int i=0;i<s.length();i++){
    //             if(s.charAt(i)=='0')
    //                 sb.append("1");
    //             else sb.append("0");
    //         }
    //         return sb.reverse();
    //     }
    //  public StringBuilder fun1(int n,StringBuilder s)
    //     { 
    //       if(n==1)
    //           return new StringBuilder("0");
    //      StringBuilder temp= fun1(n-1,s) + new StringBuilder("1")+fun2(s);  
    //          return temp;
    //     }
//     public char findKthBit(int n, int k) {
        
//         if(n==0)
//         {
//             return '0';
//         }
//         int len=(1<<n)-1;
        
//         if(len/2 +1==k)
//             return '1';
//         else if(len/2 +1 < k)
//             return findKthBit(n-1,len-k+1)=='0' ? '1': '0';
//         else 
//             return findKthBit(n-1,k);
// //         StringBuilder s=new StringBuilder();
//         if(n==0)
//             return '0';
//          fun1(n,s);
//             return '0';
            
            class Solution {
    public char findKthBit(int n, int k) {
        if (n == 1) {
            return '0';
        }
        int len = (1 << n) - 1;
        if (k == len / 2 + 1) {
            return '1';
        } else if (k > len / 2 + 1) {
            return findKthBit(n - 1, len - k + 1) == '0' ? '1' : '0';
        } else {
            return findKthBit(n - 1, k);
        }
    }
            }
    
