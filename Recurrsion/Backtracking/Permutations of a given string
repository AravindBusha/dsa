// Permutations of a given string(gfg)

class Solution {
    //  List<List<String>> list=new ArrayList<String >();
    List<String> ans=new ArrayList<>();
    HashSet<String> set=new HashSet<>();
    StringBuilder sb=new StringBuilder();
    boolean vis[];
    public List<String> find_permutation(String S) {
        vis=new boolean[S.length()];
        fun(S);
        Collections.sort(ans);
        return ans;
    }
    
    public void fun(String S){
        //base condition ; if we reached the last end then we found a ans so push to ans ;
        if(sb.length()==S.length()){
            if(!set.contains(sb.toString())){
                ans.add(sb.toString());
                set.add(sb.toString());

            }
            return ;
        }
        // checking condition by traversing to all ele in the visited array
        for(int i=0;i<S.length();i++){
            if(!vis[i]){
                vis[i]=true;
                sb.append(S.charAt(i));
                fun(S);
                vis[i]=false;
                sb.deleteCharAt(sb.length()-1);
                
            }
        }
    }
}
