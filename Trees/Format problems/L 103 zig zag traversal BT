/*
L 103 zig zag traversal BT
 see striver video   https://www.youtube.com/watch?v=3OXWEdlIGl4&t=365s
 
 --first do the level order traversal if flag ==true insert into normal order
 -- and if flag=false then insert in reverse order

*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
             
        List<List<Integer>> nodes = new ArrayList<>();
        
        if (root == null) return nodes;
        
        boolean left = true;
        Deque<TreeNode> dq = new LinkedList<>();
        dq.addFirst(root);
        
        while (!dq.isEmpty()) {
            
            int size = dq.size();
            
            LinkedList<Integer> result = new LinkedList<>();
            
            while (size-- > 0) {
                
                TreeNode node = dq.removeFirst();
                
                if (left) {
                    
                    result.addLast(node.val);
                } else {
                    
                    result.addFirst(node.val);
                }
                
                if (node.left != null) {
                    
                    dq.addLast(node.left);
                }
                
                if (node.right != null) {
                    
                   dq.addLast(node.right);
                }
            }
                        
            left = !left;
            nodes.add(result);
        }
        
        return nodes;
    }
}
