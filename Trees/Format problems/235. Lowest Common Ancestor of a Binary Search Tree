/*
235. Lowest Common Ancestor of a Binary Search Tree
Logic:
first see if the value is equal to null || p || q then return root value
 then traverse to left and right and search for that number and if left subtree or right subtree will return the node then check the conditions given below in the code 
 
 Another logic:
 given that is BST means that value is p<=value<=q so we check for that condition if not then check if value is less than p and q then means travel to right side and if value is greater than p,q then move to left side subtree

*/

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root==null || root==p || root ==q)
            return root;
        // if(root.val==p || root.val==q) return root;
        
        TreeNode left=lowestCommonAncestor(root.left,p,q);
        TreeNode right=lowestCommonAncestor(root.right,p,q);
        
        if(left!=null && right!=null)
            return root;
        else if(left!=null)
            return left;
        else
            return right;

    }
}
