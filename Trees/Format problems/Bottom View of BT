/*
Top view of binary tree

https://www.youtube.com/watch?v=wTloJwckQTU&list=PLUcsbZa0qzu3yNzzAxgvSgRobdUUJvz7p&index=61

use the deque for the level order traversal and use the treemap
*/

class Solution
{
    static ArrayList<Integer> topView(Node root)
    {
        Queue<Pair> q= new ArrayDeque<>();
        Map<Integer,Integer> map=new TreeMap<>();
        
        q.add(new Pair(0,root));
        while(!q.isEmpty())
        {
            Pair cur=q.poll();
            if(!map.containsKey(cur.hd))
            {
                map.put(cur.hd,cur.node.data);
            }
            if(cur.node.left!=null)
            {
                q.add(new Pair(cur.hd-1,cur.node.left));
            }
            if(cur.node.right!=null)
            {
                q.add(new Pair(cur.hd+1,cur.node.right));
            }
        }
        ArrayList<Integer> res=new ArrayList<>();
        // for(Map.Entry<Integer,Integer> entry=map.entrySet())
        // {
        //     ans.add(entry.getValues)
        // }
        for(int i:map.values())
        {
            res.add(i);
        }
        return res;
    }
     static class Pair
    {
        int hd;
        Node node;
        Pair(int hd,Node node)
        {
            this.hd=hd;
            this.node=node;
        }
    }
    
    }
